/*******************************************************************************
 * ============LICENSE_START========================================================================
 * ONAP : ccsdk feature sdnr wt
 * =================================================================================================
 * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.
 * =================================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 * ============LICENSE_END==========================================================================
 ******************************************************************************/
package org.onap.ccsdk.features.sdnr.wt.mountpointstateprovider.impl;

import org.onap.ccsdk.features.sdnr.wt.common.configuration.Configuration;
import org.onap.ccsdk.features.sdnr.wt.common.configuration.ConfigurationFileRepresentation;

/**
 * Configuration of mountpoint-state-provider, general section<br>
 * - dmaapEnabled : Boolean disable/enable service depending on whether DMaaP is running or not
 * Generates default Configuration properties if none exist or exist partially
 * Generates Publisher properties only for TransportType=HTTPNOAUTH. Other TransportTypes like HTTP, AUTH_KEY and DME2 have additional properties and are not 
 * generated by default. For a list of applicable properties for the different TranportType values, please see - https://wiki.onap.org/display/DW/Feature+configuration+requirements  
 */
public class GeneralConfig implements Configuration {

    private static final String SECTION_MARKER = "general";

    private static final String PROPERTY_KEY_ENABLED = "dmaapEnabled" ; //"disabled";
   
    public static final String PROPERTY_KEY_PUBLISHER_TRANSPORTTYPE = "TransportType";
    private static final String DEFAULT_VALUE_PUBLISHER_TRANSPORTTYPE = "HTTPNOAUTH";
    
    public static final String PROPERTY_KEY_PUBLISHER_HOST_PORT = "host";
    private static final String DEFAULT_VALUE_PUBLISHER_HOST_PORT = "onap-dmap:3904";
    
    public static final String PROPERTY_KEY_PUBLISHER_TOPIC = "topic";
    private static final String DEFAULT_VALUE_PUBLISHER_TOPIC = "unauthenticated.SDNR_MOUNTPOINT_STATE_INFO";
    
    public static final String PROPERTY_KEY_PUBLISHER_CONTENTTYPE = "contenttype";
    private static final String DEFAULT_VALUE_PUBLISHER_CONTENTTYPE = "application/json";
    
    public static final String PROPERTY_KEY_PUBLISHER_TIMEOUT = "timeout";
    private static final String DEFAULT_VALUE_PUBLISHER_TIMEOUT = "20000";

    public static final String PROPERTY_KEY_PUBLISHER_LIMIT = "limit";
    private static final String DEFAULT_VALUE_PUBLISHER_LIMIT = "10000";
    
    public static final String PROPERTY_KEY_PUBLISHER_MAXBATCHSIZE = "maxBatchSize";
    public static final String DEFAULT_VALUE_PUBLISHER_MAXBATCHSIZE = "100";
    
    public static final String PROPERTY_KEY_PUBLISHER_MAXAGEMS = "maxAgeMs";
    public static final String DEFAULT_VALUE_PUBLISHER_MAXAGEMS = "250";
    
    public static final String PROPERTY_KEY_PUBLISHER_MESSAGESENTTHREADOCCURANCE = "MessageSentThreadOccurance";
    public static final String DEFAULT_VALUE_PUBLISHER_MESSAGESENTTHREADOCCURANCE = "50";

	private final ConfigurationFileRepresentation configuration;

	public GeneralConfig(ConfigurationFileRepresentation configuration) {
		this.configuration = configuration;
    	this.configuration.addSection(SECTION_MARKER);
		defaults();
	}

	public Boolean getEnabled() {
		Boolean enabled = configuration.getPropertyBoolean(SECTION_MARKER, PROPERTY_KEY_ENABLED);
		return enabled;
	}
	
	public String getHostPort() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_HOST_PORT);
	}
	
	public String getTransportType() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_TRANSPORTTYPE);
	}

	public String getTopic() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_TOPIC);
	}
	
	public String getTimeout() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_TIMEOUT);
	}
	
	public String getLimit() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_LIMIT);
	}
	
	public String getContenttype() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_CONTENTTYPE);
	}
	
	public String getMaxBatchSize() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_MAXBATCHSIZE);
	}
	
	public String getMaxAgeMs() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_MAXAGEMS);
	}
	
	public String getMessageSentThreadOccurrence() {
		return configuration.getProperty(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_MESSAGESENTTHREADOCCURANCE);
	}
	
	@Override
	public String getSectionName() {
		return SECTION_MARKER;
	}

	@Override
	public void defaults() {
		// The default value should be "false" given that SDNR can be run in environments where DMaaP is not used
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_ENABLED, Boolean.FALSE);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_TRANSPORTTYPE, DEFAULT_VALUE_PUBLISHER_TRANSPORTTYPE);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_HOST_PORT, DEFAULT_VALUE_PUBLISHER_HOST_PORT);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_TOPIC, DEFAULT_VALUE_PUBLISHER_TOPIC);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_CONTENTTYPE, DEFAULT_VALUE_PUBLISHER_CONTENTTYPE);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_TIMEOUT, DEFAULT_VALUE_PUBLISHER_TIMEOUT);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_LIMIT, DEFAULT_VALUE_PUBLISHER_LIMIT);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_MAXBATCHSIZE, DEFAULT_VALUE_PUBLISHER_MAXBATCHSIZE);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_MAXAGEMS, DEFAULT_VALUE_PUBLISHER_MAXAGEMS);
   		configuration.setPropertyIfNotAvailable(SECTION_MARKER, PROPERTY_KEY_PUBLISHER_MESSAGESENTTHREADOCCURANCE, DEFAULT_VALUE_PUBLISHER_MESSAGESENTTHREADOCCURANCE);
	}

}
